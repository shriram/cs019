MISSING LANGUAGE:

- previously local+define-struct: used to work; we had to change the
  implementation of define-struct: so SHARED could find the mutator, 
  but as a result define-struct: no longer works inside LOCAL
- (define: (n [l : (Listof: (Number$ -> Number$))]) -> (Listof: Number$)
    (map (lambda (f) (f 10)) l))
  (n (list add1 number->string))
  highlights the Number$ in return position and says
  "value 10 failed the signature" -- wtf?
- how did this happen?
  (define n->n$ (Sig: (Number$ -> Number$)))
  (define: f : n->n$ add1)
  > f
  (lambda (a1) ...)
- add parameterized signatures (esp for structs)

- test against last year's code

- add unchecked versions of sig forms
- add support for undefined and test against shared
- Hashof:, ...

- signature checking on list mutation
- signature checking on vector mutation

ERROR MESSAGES:

- parse-sig is losing the source location of (... -> ...)
  -- fails to highlight in or:
  -- fails in (funf 3)
- error messages don't use the right printer

NICETIES:

- Indentation levels for define:, lambda:, etc.
- syntax parse
- Test with debugger
- Improve first-order Vectorof$ to not convert to list
- Remove redundancies in sigs.rkt
- Scribble docs
- better description names for signatures
- multi-term define gets ASL error, not one from syntax-case
- quicker detection of use of HO sigs in or: and and:? BUT it cannot
  be so early as to eagerly evaluate the params, else we can't have
  forward references!

MISCELLANEOUS:

- DMdA: where did list-of go?
